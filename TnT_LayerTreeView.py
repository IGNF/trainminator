#-*- coding: utf-8 -*-
"""
/***************************************************************************
TnT_LayerTreeView
                                 A QGIS plugin
 test de nouveau plugin
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2021-01-25
        git sha              : $Format:%H$
        copyright            : (C) 2021 by IGN
        authors              : Yann Le Borgne
        email                : yann.le-borgne@ign.fr
        version              : 1.3.0

 01/12/21: Modification des affichages des items des QgsLayerTreeView.
           Les affichages des items sont maintenant identiques dans le plugins
           et l'UI de QGIS.
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
import inspect

from qgis.core import (QgsLayerTreeModel, QgsRasterLayer,
                       QgsVectorLayer, QgsLayerTreeNode,
                       QgsProject)

from qgis.gui import (QgsLayerTreeView)

from PyQt5 import QtCore
from PyQt5.QtWidgets import (QSizePolicy, QGroupBox,
                             QLabel, QSlider,
                             QSpacerItem, QVBoxLayout,
                             QHBoxLayout)

def lineno():
    """Returns the current line number in Python source code"""
    return inspect.currentframe().f_back.f_lineno


class TnTLayerTreeView(QGroupBox):
    """
    Table of contents management class.
    """

    def __init__(self, parentWindow=None, parent=None, layerTreeRoot=None):
        QGroupBox.__init__(self, parent)

        self.parentWindow=parentWindow
        self.currentLayer=None

        self.layerTreeRoot=None
        self.layerTreeView=None
        self.layerTreeModel=None

        self.setLayerTreeView(layerTreeRoot, self.parentWindow.objectName().split('_')[0] )

        self.setUpUI()

        sil = self.findChild(QSlider, "opacity_slider")
        lab = self.findChild(QLabel, "opacity_label")

        sil.valueChanged.connect(lab.setNum)
        sil.valueChanged.connect(self.changeOpacity)

        self.layerTreeView.currentLayerChanged.connect(self.currentLayerChanged)

        QgsProject.instance().cleared.connect(self.clearAll_Nodes)
        QgsProject.instance().readProject.connect(self.reloadAll_Nodes)

        #The LayerTreRoot in additionnal view must not emit a signal when layers are added or removed
        if self.parentWindow.objectName() == "Master_View" :
            self.layerTreeRoot.removedChildren[QgsLayerTreeNode, int, int].connect(self.removedChildren)
            self.layerTreeRoot.addedChildren[QgsLayerTreeNode, int, int].connect(self.addedChildren)


    @QtCore.pyqtSlot( QgsLayerTreeNode, int, int)
    def removedChildren(self, node, indexFrom, indexTo):
        """
        Parameters
        ----------
        node : TYPE
            DESCRIPTION.
        indexFrom : TYPE
            DESCRIPTION.
        indexTo : TYPE
            DESCRIPTION.

        Returns
        -------
        None.

        """
        # print(f"line:{lineno()},{self.__class__.__name__}->\
        #       {inspect.currentframe().f_code.co_name}({node},\
        #                                               {indexFrom},\
        #                                               {indexTo})")

        if self.parentWindow.labelingToolsBox.save_start_button_state :
            try :
                add_view = self.parentWindow.getAdditionnalView()
                layerTreeRoot = add_view.tntLayerTreeView.getLayerTreeRoot()

                target_groupName = node.name()
                target_LayerTreeGroup = layerTreeRoot.findGroup(target_groupName)

                tmp_LayerTreeNode = target_LayerTreeGroup.findLayers()[indexFrom]
                target_LayerTreeGroup.removeChildNode(tmp_LayerTreeNode)

                target_LayerTreeGroup.setExpanded (False)
                target_LayerTreeGroup.setItemVisibilityChecked(False)

            except AttributeError :
                pass
        else:
            pass

    @QtCore.pyqtSlot( QgsLayerTreeNode, int, int)
    def addedChildren(self, node, indexFrom, indexTo):
        """
        Parameters
        ----------
        node : TYPE
            DESCRIPTION.
        indexFrom : TYPE
            DESCRIPTION.
        indexTo : TYPE
            DESCRIPTION.

        Returns
        -------
        None.

        """
        # print(f"line:{lineno()},{self.__class__.__name__}->\
        #       {inspect.currentframe().f_code.co_name}({node},\
        #                                               {indexFrom},\
        #                                               {indexTo})")

        if self.parentWindow.labelingToolsBox.save_start_button_state :
            try :
                add_view = self.parentWindow.getAdditionnalView()
                layerTreeRoot = add_view.tntLayerTreeView.getLayerTreeRoot()

                target_groupName = node.name()

                clone_treeLayer = node.findLayers()[indexFrom].clone()
                clone_treeLayer.setExpanded (False)
                clone_treeLayer.setItemVisibilityChecked(False)

                target_LayerTreeGroup = layerTreeRoot.findGroup(target_groupName)
                target_LayerTreeGroup.addChildNode(clone_treeLayer)

                target_LayerTreeGroup.setExpanded (True)
                target_LayerTreeGroup.setItemVisibilityChecked(False)

            except AttributeError :
                pass
        else:
            pass

    def clearAll_Nodes(self):
        """
        Returns
        -------
        None.

        """
        # print(f"line:{lineno()},{self.__class__.__name__}->\
        #       {inspect.currentframe().f_code.co_name}()")

        if self.parentWindow.objectName() != "Master_View" :
            self.layerTreeRoot.clear()

    def reloadAll_Nodes(self):
        """
        Returns
        -------
        None.

        """
        # print(f"line:{lineno()},{self.__class__.__name__}->\
        #       {inspect.currentframe().f_code.co_name}()")

        if self.parentWindow.objectName() != "Master_View" :
            list_group = QgsProject.instance().layerTreeRoot().children()
            for group in list_group:
                self.layerTreeRoot.addChildNode( group.clone() )

    def setLayerTreeView(self, layerTreeRoot, layerTreeName_Prefix):
        """
        Parameters
        ----------
        layerTreeRoot : TYPE
            DESCRIPTION.
        layerTreeName_Prefix : TYPE
            DESCRIPTION.

        Returns
        -------
        None.

        """
        # print(f"line:{lineno()},{self.__class__.__name__}->\
        #       {inspect.currentframe().f_code.co_name}({layerTreeName_Prefix})")

        self.layerTreeRoot=layerTreeRoot
        self.layerTreeRoot.setObjectName(layerTreeName_Prefix+"_LayerTreeRoot")

        self.layerTreeView=QgsLayerTreeView(self)
        self.layerTreeView.setObjectName(layerTreeName_Prefix+"_LayerTreeView")

        self.layerTreeModel=QgsLayerTreeModel(layerTreeRoot)
        self.layerTreeModel.setObjectName(layerTreeName_Prefix+"_LayerTreeModel")

        self.layerTreeModel.setFlag( QgsLayerTreeModel.UseEmbeddedWidgets)
        self.layerTreeModel.setFlag( QgsLayerTreeModel.UseTextFormatting)
        self.layerTreeModel.setFlag( QgsLayerTreeModel.AllowNodeChangeVisibility)
        self.layerTreeModel.setFlag( QgsLayerTreeModel.ActionHierarchical)
        self.layerTreeView.setModel(self.layerTreeModel)

    def getLayerTreeRoot(self):
        """
        Returns
        -------
        TYPE
            DESCRIPTION.

        """
        return self.layerTreeRoot


    def setSliderGroup(self):
        """
        Returns
        -------
        group : TYPE
            DESCRIPTION.

        """

        # print(f"line:{lineno()},{self.__class__.__name__}->\
        #       {inspect.currentframe().f_code.co_name}()")

        group = QGroupBox(self)
        group.setObjectName("slider_group")
        group.setLayout(QHBoxLayout(group))
        hLayout = group.layout()
        hLayout.setContentsMargins(-1, 1, -1, 1)

        sizePolicy = QSizePolicy(QSizePolicy.Maximum, QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)

        spacerItem = QSpacerItem(40, 20, QSizePolicy.Expanding, QSizePolicy.Minimum)
        hLayout.addItem(spacerItem)

        slider = QSlider(QtCore.Qt.Horizontal,group)
        slider.setObjectName("opacity_slider")
        slider.setMinimum(0)
        slider.setMaximum(100)
        slider.setTickInterval(25)
        slider.setTickPosition(QSlider.TicksAbove)
        slider.setPageStep(25)
        slider.setSingleStep(5)
        slider.setValue(100)
        slider.setSizePolicy(sizePolicy)
        hLayout.addWidget(slider)

        label = QLabel(group)
        label.setObjectName("opacity_label")
        label.setNum(slider.value())
        label.setSizePolicy(sizePolicy)
        hLayout.addWidget(label)

        spacerItem1 = QSpacerItem(40, 20, QSizePolicy.Expanding, QSizePolicy.Minimum)
        hLayout.addItem(spacerItem1)

        return group

    def setUpUI(self):
        """
        Returns
        -------
        None.

        """
        # print(f"line:{lineno()},{self.__class__.__name__}->\
        #       {inspect.currentframe().f_code.co_name}()")

        sizePolicy = QSizePolicy(QSizePolicy.Maximum, QSizePolicy.Maximum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        self.setSizePolicy(sizePolicy)

        self.setLayout(QVBoxLayout(self))
        vLayout = self.layout()
        vLayout.setContentsMargins(-1, 1, -1, 1)

        sliderGroup=self.setSliderGroup()
        vLayout.addWidget(sliderGroup)

        vLayout.addWidget(self.layerTreeView)

        spacerItem = QSpacerItem(20, 40, QSizePolicy.Minimum, QSizePolicy.Minimum)
        vLayout.addItem(spacerItem)

    def setParentWindow(self, parentWindow):
        """
        Parameters
        ----------
        parentWindow : TYPE
            DESCRIPTION.

        Returns
        -------
        None.

        """
        #print(f"line:{lineno()},TnTLayerTreeView->setParentWindow()")
        self.parentWindow=parentWindow

    def getParentWindow(self):
        """
        Returns
        -------
        TYPE
            DESCRIPTION.

        """
        #print(f"line:{lineno()},TnTLayerTreeView->getParentWindow()")
        return self.parentWindow



    def hideNodes(self, layerTreeView , layerTreeModel, listNodes):
        """
        Parameters
        ----------
        layerTreeView : TYPE
            DESCRIPTION.
        model : TYPE
            DESCRIPTION.
        listNodes : TYPE
            DESCRIPTION.

        Returns
        -------
        None.

        """
        #print(f"line:{lineno()},TnTLayerTreeView->hideNodes(layerTreeView:{layerTreeView}, layerTreeModel:{layerTreeModel}, listNodes:{listNodes})")
        for node in listNodes :
            index = layerTreeModel.node2index( node )
            layerTreeView.setRowHidden( index.row(), index.parent(), True )
            node.setCustomProperty( 'nodeHidden', 'true')
            layerTreeView.setCurrentIndex(layerTreeModel.node2index(self.layerTreeRoot))

    def changeOpacity(self):
        """
        Returns
        -------
        None.

        """
        #print(f"line:{lineno()},TnTLayerTreeView->changeOpacity()")
        slider = self.findChild(QSlider, "opacity_slider")
        op = slider.value()/100
        if isinstance(self.currentLayer, QgsRasterLayer):
            self.currentLayer.renderer().setOpacity(op)

        elif isinstance(self.currentLayer, QgsVectorLayer):
            self.currentLayer.setOpacity(op)

        self.getParentWindow().getCanvas().refresh()

    def currentLayerChanged (self, layer):
        """
        Parameters
        ----------
        layer : TYPE
            DESCRIPTION.

        Returns
        -------
        None.

        """
        #print(f"line:{lineno()},TnTLayerTreeView->currentLayerChanged(layer:{layer}")
        self.currentLayer=layer
        op=0
        if isinstance(self.currentLayer, QgsRasterLayer):
            op=self.currentLayer.renderer().opacity()

        elif isinstance(self.currentLayer, QgsVectorLayer):
            op=self.currentLayer.opacity()

        slider = self.findChild(QSlider, "opacity_slider")
        slider.setValue(op*100)
