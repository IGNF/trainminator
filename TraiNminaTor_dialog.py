# -*- coding: utf-8 -*-
"""
/***************************************************************************
 TraiNminaTorDialog
                                 A QGIS plugin
Labelisation de données segmentées.
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2021-01-25
        git sha              : $Format:%H$
        copyright            : (C) 2021 by IGN
        authors              : Yann Le Borgne
        email                : yann.le-borgne@ign.fr
        version              : 1.3.0
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

import inspect
import os.path

from qgis.core import QgsProject

from PyQt5 import QtCore
from PyQt5.QtCore import (Qt, QEvent, QUrl,
                          QStandardPaths)
from PyQt5.QtGui import (QKeyEvent)
from PyQt5.QtWebKitWidgets import QWebView
from PyQt5.QtWidgets import (QSizePolicy, QWidget, QFileDialog,
                             QPushButton, QVBoxLayout, QGridLayout,
                             QHBoxLayout, QSpacerItem, QGroupBox,
                             QDockWidget, QMenu, QMenuBar,
                             QStatusBar, QAction, QMainWindow)

from .TnT_NomenclatureWidget import TnTnomenclatureWidget
from .TnT_LayerTreeView import TnTLayerTreeView
from .TnT_Communicate import TnTcommunicate
from .TnT_AdditionalView import TnTadditionalView
from .TnT_LabelingToolsBox import TnTlabelingToolsBox
from .TnT_StatTools import TnTstatTools


def lineno():
    """Returns the current line number in Python source code"""
    return inspect.currentframe().f_back.f_lineno


class TraiNminaTorDialog(QMainWindow):
    """
    gui class.
    """

    def __init__(self, parent=None):
        """Constructor."""
        QMainWindow.__init__(self, parent)
        #super(TraiNminaTorDialog, self).__init__(parent)

        # Set up the user interface from Designer through FORM_CLASS.
        # After self.setupUi() you can access any designer object by doing
        # self.<objectname>, and you can use autoconnect slots - see
        # http://qt-project.org/doc/qt-4.8/designer-using-a-ui-file.html
        # #widgets-and-dialogs-with-auto-connect

        # self.tableName = ["TILING", "SEGMENTING", "LABELING"]
        # self.UserPreferences = {"QTabWidget": ["LABELING"]}

        self.root = QgsProject.instance()

        # Project
        self.projectPath = None
        self.projectName = None

        # Active canvas is the canvas of current page table.
        self.activeCanvas = None
        self.tntLayerTreeView = None

        self.additionnalView = None
        # if exist , Additional canvas is the canvas of additional view.
        self.AdditionalCanvas = None

        # labelingToolsBox reference
        self.labelingToolsBox = None

        # nomenclatureWidget reference
        self.nomenclatureWidget = None

        # Signals class object
        self.comm = TnTcommunicate()

        css_File=u"css/Default.css"
        self.css_Path=os.path.join(os.path.dirname(__file__), css_File)
        self.load_stylesheet(self.css_Path)

        self.setupUi(self)

        # self.root.projectSaved.connect(self.projectSaved)

        # Fermeture projet qgis courant, ouverture d'un nouveau project qgis
        # Rechargement du nouveau projet, plugin en fonction
        # A reactiver plus tard, des reinitialisations sont incorrectes.
        self.root.cleared.connect(self.clear)
        self.root.readProject.connect(self.readProject)

    def clear(self):
        """
            returns none:
        """
        #print(f"line:{lineno()},TraiNminaTorDialog ->clear()")
        self.labelingToolsBox.projectDataManager.clear()
        self.nomenclatureWidget.clear()
        self.labelingToolsBox.clear()
        self.disableWidget(self.menuNomenclature)
        self.disableWidget(self.menutools)

    def readProject(self):
        """
            returns none:
        """
        #print(f"line:{lineno()},TraiNminaTorDialog ->readProject()")
        self.labelingToolsBox.projectDataManager.readProject()
        self.enableWidget(self.menuNomenclature)
        self.enableWidget(self.menutools)

    def getCanvas(self):
        """
            returns none:
        """
        #print(f"line:{lineno()},TraiNminaTorDialog ->getCanvas()")
        return self.getActiveCanvas()

    def setActiveCanvas(self, activeCanvas=None):
        """
            param activeCanvas:
            returns none:
        """
        #print(f"line:{lineno()},TraiNminaTorDialog ->setActiveCanvas()")
        self.activeCanvas = activeCanvas

    def unsetActiveCanvas(self):
        """"
            returns none:
        """
        #print(f"line:{lineno()},TraiNminaTorDialog ->unsetActiveCanvas()")
        self.setActiveCanvas()

    def getActiveCanvas(self):
        """
            returns none:
        """
        #print(f"line:{lineno()},TraiNminaTorDialog ->unsetActiveCanvas()")
        return self.activeCanvas

    def setAdditionnalView(self, additionnalView=None):
        """
            param additionnalView: new additionnalView object
            returns none:
        """
        self.additionnalView = additionnalView

    def unsetAdditionnalView(self):
        """
         unset this attribute additionalView with None value.
            returns none:
        """
        self.setAdditionnalView()

    def getAdditionnalView(self):
        """
        returns the value of the attribute
            returns none:
        """
        return self.additionnalView

    def setAdditionalCanvas(self, additionalCanvas=None):
        """
            param additionalCanvas: new additionalCanvas object
            returns none:
        """
        self.AdditionalCanvas = additionalCanvas

    def unsetAdditionalCanvas(self):
        """
            Unset this attribute AdditionalCanvas with None value.
            returns none:
        """
        self.setAdditionalCanvas()

    def getAdditionalCanvas(self):
        """
            returns none:
        """
        return self.AdditionalCanvas

    def getRootGroup(self):
        """
            returns none:
        """
        return self.tntLayerTreeView.layerTreeModel.rootGroup()

    def setupUi(self, mainWindow):
        """
            param mainWindow:
            returns none:
        """

        #print(f"line:{lineno()},TraiNminaTorDialog ->setupUi()")
        mainWindow.setObjectName("Master_View")
        mainWindow.resize(1600, 900)

        # Init  Central widget
        self.centralwidget = QWidget(mainWindow)
        self.centralwidget.setObjectName("centralwidget")

        self.centralVerticalLayout = QVBoxLayout(self.centralwidget)
        self.centralVerticalLayout.setObjectName("centralVerticalLayout")

        #And first widget at TOP
        self.topWidget = self.setTopWidget(QWidget(self.centralwidget))
        sizePolicy = QSizePolicy(QSizePolicy.Minimum, QSizePolicy.Maximum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.topWidget.sizePolicy().hasHeightForWidth())
        self.topWidget.setSizePolicy(sizePolicy)
        self.centralVerticalLayout.addWidget(self.topWidget)

        #And second widget
        self.labelingToolsBox=TnTlabelingToolsBox(self, self.centralwidget)
        sizePolicy = QSizePolicy(QSizePolicy.Minimum, QSizePolicy.Minimum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.labelingToolsBox.sizePolicy().hasHeightForWidth())
        self.labelingToolsBox.setSizePolicy(sizePolicy)
        self.centralVerticalLayout.addWidget(self.labelingToolsBox)

        mainWindow.setCentralWidget(self.centralwidget)

        # self.centerAll_pushButton.clicked.connect( self.centerAll )
        # #Calling <synchro_Viesw()> method, on clicking button <synchro_pushButton>
        # self.synchro_pushButton.clicked.connect( self.synchro_Views )
        # #Calling <openClose_AdiditionalView()> method, on clicking button <additionalView_pushButton>
        # self.additionalView_pushButton.clicked.connect( self.openClose_AdditionalView )

        # Added dock widget on left side (ie west)  see:QtCore.Qt.DockWidgetArea(1)
        self.dockWidget_west=self.setDockWidget_west(QDockWidget(self))
        mainWindow.addDockWidget(QtCore.Qt.DockWidgetArea(1), self.dockWidget_west)

        # Added dock widget on right side (ie east)  see:QtCore.Qt.DockWidgetArea(2)
        self.dockWidget_east=self.setDockWidget_east(QDockWidget(self))
        mainWindow.addDockWidget(QtCore.Qt.DockWidgetArea(2), self.dockWidget_east)

        # Init menu bar
        self.menubar=self.setMenu(QMenuBar(mainWindow), "menubar" )
        mainWindow.setMenuBar(self.menubar)
        #self.centralVerticalLayout.setMenuBar(self.menubar)

        # Init status bar
        self.statusbar = QStatusBar(mainWindow)
        self.statusbar.setObjectName("statusbar")
        mainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(mainWindow)
        QtCore.QMetaObject.connectSlotsByName(mainWindow)

    def setDockWidget_west(self, dockWidget):
        """
            param dockWidget:
            returns none:
        """
        #print(f"line:{lineno()},TraiNminaTorDialog ->setDockWidget_west()")
        dockWidget.setFeatures(dockWidget.features() & ~
                               QDockWidget.DockWidgetClosable)

        sizePolicy = QSizePolicy(QSizePolicy.Maximum, QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(
            dockWidget.sizePolicy().hasHeightForWidth())
        dockWidget.setSizePolicy(sizePolicy)

        dockWidgetContents = QWidget()
        gridLayout = QGridLayout(dockWidgetContents)

        self.tntLayerTreeView = TnTLayerTreeView(
            self, dockWidgetContents, QgsProject.instance().layerTreeRoot())
        # self.tntLayerTreeView.setParentWindow(self)

        sizePolicy = QSizePolicy(QSizePolicy.Minimum, QSizePolicy.Minimum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(
            self.tntLayerTreeView.sizePolicy().hasHeightForWidth())
        self.tntLayerTreeView.setSizePolicy(sizePolicy)

        gridLayout.addWidget(self.tntLayerTreeView, 0, 0, 1, 1)

        dockWidget.setWidget(dockWidgetContents)

        return dockWidget

    def setDockWidget_east(self, dockWidget):
        """
            param dockWidget:
            returns none:
        """
        #print(f"line:{lineno()},TraiNminaTorDialog ->setDockWidget_east()")
        dockWidget.setFeatures(dockWidget.features() & ~
                               QDockWidget.DockWidgetClosable)
        self.nomenclatureWidget = TnTnomenclatureWidget(self, dockWidget)
        sizePolicy = QSizePolicy(QSizePolicy.Minimum, QSizePolicy.Minimum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        self.nomenclatureWidget.setSizePolicy(sizePolicy)
        dockWidget.setWidget(self.nomenclatureWidget)
        return dockWidget

    def setTopWidget(self, widget):
        """


        Parameters
        ----------
        widget : TYPE
            DESCRIPTION.

        Returns
        -------
        groupBox : TYPE
            DESCRIPTION.

        """
        # print(f"line:{lineno()},{self.__class__.__name__}->\
        #       {inspect.currentframe().f_code.co_name}(widget={widget})")

        sizePolicy = QSizePolicy(QSizePolicy.Preferred, QSizePolicy.Maximum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)

        groupBox = QGroupBox(widget)
        groupBox.setSizePolicy(sizePolicy)

        # Change size policy for next pushButton
        sizePolicy = QSizePolicy(QSizePolicy.Maximum, QSizePolicy.Minimum)

        layout = QHBoxLayout(groupBox)
        layout.setContentsMargins(4, 2, 4, 2)
        layout.setSpacing(4)

        centerAll_pushButton = QPushButton(groupBox)
        centerAll_pushButton.setText("Center All")
        centerAll_pushButton.setObjectName(centerAll_pushButton.text().replace(' ','_'))
        centerAll_pushButton.setSizePolicy(sizePolicy)
        layout.addWidget(centerAll_pushButton)

        # Spacer : push all  buttons on right side
        spacerItem = QSpacerItem(558,
                                 20,
                                 QSizePolicy.Expanding,
                                 QSizePolicy.Minimum
                                 )
        layout.addItem(spacerItem)

        synchroViews_pushButton = QPushButton(groupBox)
        synchroViews_pushButton.setText("Synchro Views")
        synchroViews_pushButton.setObjectName(synchroViews_pushButton.text().replace(' ','_'))
        synchroViews_pushButton.setSizePolicy(sizePolicy)
        synchroViews_pushButton.setCheckable(True)
        synchroViews_pushButton.setChecked(False)
        self.disableWidget(synchroViews_pushButton)
        layout.addWidget(synchroViews_pushButton)

        additionalView_pushButton = QPushButton(groupBox)
        additionalView_pushButton.setText("Open Add View")
        additionalView_pushButton.setObjectName(additionalView_pushButton.text().replace(' ','_'))
        additionalView_pushButton.setSizePolicy(sizePolicy)
        additionalView_pushButton.setCheckable(True)
        additionalView_pushButton.setChecked(False)
        layout.addWidget(additionalView_pushButton)

        centerAll_pushButton.clicked.connect(self.centerAll)
        # Calling <synchro_Viesw()> method, on clicking button <synchroViews_pushButton>
        synchroViews_pushButton.clicked.connect(self.synchronize_Views)
        # Calling <openClose_AdiditionalView()> method, on clicking button <additionalView_pushButton>
        additionalView_pushButton.clicked.connect(
            self.openClose_AdditionalView)

        return groupBox

    def disableWidget(self, target):
        """
            param menu:
            returns none:
        """
        target.setEnabled(False)

    def enableWidget(self, target):
        """
            param menu:
            returns none:
        """
        # print(f"line:{lineno()},{self.__class__.__name__}->\
        #       {inspect.currentframe().f_code.co_name}(target={target})")

        target.setEnabled(True)

    def setMenu(self, widget: QMenuBar, widgetName):
        """
         Initializes the menus.
            param widget: The QMenuBar class provides a horizontal menu bar.
            param widgetName: This property holds the name of this QMenuBar.
            returns none:
        """
        # print(f"line:{lineno()},{self.__class__.__name__}->\
        #       {inspect.currentframe().f_code.co_name}()")

        widget.setObjectName(widgetName)

        # Menu nomenclature
        self.menuNomenclature = QMenu(widget)
        self.menuNomenclature.setObjectName("menuNomenclature")

        self.actionOpenNomenclature = QAction(self)
        self.actionOpenNomenclature.setShortcut('Ctrl+O')
        self.actionOpenNomenclature.setStatusTip('Open Nomenclatures')
        self.actionOpenNomenclature.setObjectName("actionOpenNomenclature")

        self.menuNomenclature.addAction(self.actionOpenNomenclature)
        widget.addAction(self.menuNomenclature.menuAction())

        self.actionOpenNomenclature.triggered.connect(self.openNomenclature)

        # Menu tools
        self.menutools = QMenu(widget)
        self.menutools.setObjectName("menuTools")

        self.actionStartChartTool = QAction(self)
        self.actionStartChartTool.setShortcut('Ctrl+C')
        self.actionStartChartTool.setStatusTip('Chart tool')
        self.actionStartChartTool.setObjectName("actionStartChartTool")
        self.menutools.addAction(self.actionStartChartTool)

        self.actionStartControlTool = QAction(self)
        self.actionStartControlTool.setShortcut('Ctrl+V')
        self.actionStartControlTool.setStatusTip('Control tool')
        self.actionStartControlTool.setObjectName("actionStartControlTool")
        self.menutools.addAction(self.actionStartControlTool)

        widget.addAction(self.menutools.menuAction())

        self.actionStartChartTool.triggered.connect(self.startChartTool)
        self.actionStartControlTool.triggered.connect(self.startControlTool)

        # Menu help
        self.menuhelp = QMenu(widget)
        self.menuhelp.setObjectName("menuHelp")

        self.actionOpenDocumentation = QAction(self)
        self.actionOpenDocumentation.setShortcut('Ctrl+H')
        self.actionOpenDocumentation.setStatusTip('Open Documentation')
        self.actionOpenDocumentation.setObjectName("actionOpenDocumentation")

        self.menuhelp.addAction(self.actionOpenDocumentation)

        widget.addAction(self.menuhelp.menuAction())
        self.actionOpenDocumentation.triggered.connect(self.openDocumentation)

        return widget

    def retranslateUi(self, mainWindow):
        """
            param mainWindow:
            returns none:
        """
        #print(f"line:{lineno()},TraiNminaTorDialog ->retranslateUi()")
        _translate = QtCore.QCoreApplication.translate
        mainWindow.setWindowTitle(_translate("TraiNminator", "TraiNminator"))

        self.menuNomenclature.setTitle(
            _translate("mainWindow", "Nomenclature"))
        self.actionOpenNomenclature.setText(_translate("mainWindow", "Open"))
        # self.actionSaveNomenclature.setText(_translate("mainWindow", "Save"))
        # self.actionSave_AsNomenclature.setText(_translate("mainWindow", "Save As"))

        self.menuhelp.setTitle(_translate("mainWindow", "Help"))
        self.actionOpenDocumentation.setText(
            _translate("mainWindow", "Open Documentation"))

        self.menutools.setTitle(_translate("mainWindow", "Tools"))
        self.actionStartChartTool.setText(
            _translate("mainWindow", "Chart tool"))
        self.actionStartControlTool.setText(
            _translate("mainWindow", "Control tool"))

    def startChartTool(self):
        """
            returns none:
        """
        TnTstatTools(self)

    def startControlTool(self):
        """
            returns none:
        """
        #print(f"line:{lineno()},TraiNminaTorDialog ->startControlTool()")
        self.labelingToolsBox.startControlTool()

    def openNomenclature(self):
        """
            returns none:
        """
        #print(f"line:{lineno()},TraiNminaTorDialog ->openNomenclature()")
        where = QgsProject.instance().absolutePath()
        if os.path.exists(where+"/NOMENCLATURE"):
            where = where+"/NOMENCLATURE"

        filterName = 'Nomenclature File (*.csv)'
        listNomenclatures = QFileDialog.getOpenFileNames(self,
                                                         'Open Nomenclatures',
                                                         where,
                                                         filterName)

        if listNomenclatures[0]:
            self.nomenclatureWidget.processNomenclatureList(
                listNomenclatures[0])
        else:
            pass
        #print(f"line:{lineno()},TraiNminaTorDialog <<-- openNomenclature()")

    def openDocumentation(self):
        """
            returns none:
        """
        #print(f"line:{lineno()},TraiNminaTorDialog ->openDocumentation()")
        standardPaths_list = QStandardPaths.standardLocations(
            QStandardPaths.AppDataLocation)
        documentation_url = standardPaths_list[0] + \
            "/profiles/default/python/plugins/trainminator_3/docs/"

        self.web = QWebView()
        self.web.settings().setUserStyleSheetUrl(
            QUrl.fromLocalFile(documentation_url+"trainStyle.css"))

        self.web.load(QUrl.fromLocalFile(documentation_url+"index.html"))
        self.web.show()

    def toggleTextButton(self, pushButton, textON, textOFF):
        """
            param pushButton:
            param textON:
            param textOFF:
            returns none:
        """
        #print(f"line:{lineno()},TraiNminaTorDialog ->toggleTextButton()")
        t = (lambda: textON, lambda: textOFF)[pushButton.isChecked()]()
        pushButton.setText(t)

    def openAdditionalView(self):
        """
            returns none:
        """
        # print(f"line:{lineno()},{self.__class__.__name__}->\
        #       {inspect.currentframe().f_code.co_name}()")

        #print(f"{lineno()} TraiNminaTorDialog --> openAdditionalView()")
        self.additionnalView = TnTadditionalView(self)
        # Init Additional canvas on self
        self.setAdditionalCanvas(self.additionnalView.getCanvas())
        # ActivateCanvas is the Slave of Additional canvas
        self.getAdditionalCanvas().setSlave(self.getActiveCanvas())
        # Additional canvas is the Slave of activateCanvas
        self.getActiveCanvas().setSlave(self.additionnalView.getCanvas())

        synchroViews_pushButton = self.findChild(type(self.sender()),
                                                 "Synchro_Views")
        self.enableWidget(synchroViews_pushButton)

    def closeAdditionalView(self):
        """
            returns none:
        """
        # print(f"line:{lineno()},{self.__class__.__name__}->\
        #       {inspect.currentframe().f_code.co_name}()")

        self.getActiveCanvas().unsetSlave()
        # Force synchro mode to False state
        self.getActiveCanvas().setSynchroMode()
        # Unset Additional canvas on self
        self.unsetAdditionalCanvas()
        # Call Close method on addditional view
        self.additionnalView.comm.closeAdditionalView.emit()

        synchroViews_pushButton = self.findChild(type(self.sender()),
                                                 "Synchro_Views")
        synchroViews_pushButton.setChecked(False)
        self.toggleTextButton(synchroViews_pushButton,
                              "Synchro Views", "UnSynchro Views")
        self.disableWidget(synchroViews_pushButton)

    def openClose_AdditionalView(self):
        """
            returns none:
        """
        # print(f"line:{lineno()},{self.__class__.__name__}->\
        #       {inspect.currentframe().f_code.co_name}()")

        button = self.sender()

        if button.isChecked():
            self.openAdditionalView()
        else:
            self.closeAdditionalView()
        # Change state of button Open/Close
        self.toggleTextButton(button, "Open Add View", "Close Add View")

    def synchronize_Views(self):
        """
            returns none:
        """
        # print(f"line:{lineno()},{self.__class__.__name__}->\
        #       {inspect.currentframe().f_code.co_name}()")

        sender = self.sender()
        self.toggleTextButton(
            sender,
            "Synchro Views",
            "UnSynchro Views"
        )
        self.getActiveCanvas().toggleStateSynchroMode()
        self.set_SynchronizeViews_State(sender, self.getAdditionnalView())

    def set_SynchronizeViews_State(self, sender, view_target):
        """


        Parameters
        ----------
        sender : TYPE
            DESCRIPTION.
        view_target : TYPE
            DESCRIPTION.

        Returns
        -------
        None.

        """
        # print(f"line:{lineno()},{self.__class__.__name__}->\
        #       {inspect.currentframe().f_code.co_name}(sender={sender},\
        #                                               view_target={view_target} )")

        widget_type = type(sender)
        widget_name = sender.objectName()
        button = view_target.findChild(widget_type, widget_name)
        button.setChecked(sender.isChecked())
        button.setText(sender.text())

        view_target.getCanvas().toggleStateSynchroMode()

    def centerAll(self):
        """
            returns none:
        """
        self.getActiveCanvas().zoomToFullExtent()


    def load_stylesheet(self, cssFile):
        """

        Parameters
        ----------
        cssFile : TYPE, optional
            DESCRIPTION. The default is "default.css".

        Returns
        -------
        None.

        """
        rc = QtCore.QFile(cssFile)
        rc.open(QtCore.QFile.ReadOnly)
        content = rc.readAll().data()
        self.setStyleSheet(str(content, "utf-8"))

    def closeEvent(self, event: QEvent):
        """
            param event:
            returns none:
        """
        #print(f"{lineno()} TraiNminaTorDialog --> closeEvent({event})")
        try:
            self.additionnalView.comm.closeAdditionalView.emit()
        except AttributeError:
            pass

    def event(self, event: QEvent):
        """
            param event:
            returns none:
        """
        #print(f"{lineno()} TraiNminaTorDialog --> event()")
        if isinstance(event, QKeyEvent):
            if (Qt.Key_0 <= event.key() <= Qt.Key_9 or event.key() == Qt.Key_Return):
                self.nomenclatureWidget.keyPressEvent(event)
                return True

            if event.key() == Qt.Key_Space:
                self.labelingToolsBox.getPushButton("Show Context").setFocus()
                self.labelingToolsBox.canvas.event(event)
                return True

        return super().event(event)

    def disableWindowCloseButton(self):
        """
            returns none:
        """
        self.setWindowFlags(self.windowFlags()  # reuse initial flags
                            & ~QtCore.Qt.WindowCloseButtonHint  # and unset flag
                            )
        self.show()

    def enableWindowCloseButton(self):
        """
            returns none:
        """
        self.setWindowFlags(self.windowFlags()  # reuse initial flags
                            | QtCore.Qt.WindowCloseButtonHint  # and set flag
                            )
        self.show()
