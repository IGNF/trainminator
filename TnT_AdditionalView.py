# -*- coding: utf-8 -*-
"""
/***************************************************************************
TnT_AdditionalView
                                 A QGIS plugin
Labelisation de données segmentées.
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2021-01-25
        git sha              : $Format:%H$
        copyright            : (C) 2021 by IGN
        authors              : Yann Le Borgne
        email                : yann.le-borgne@ign.fr
        version              : 1.3.0

 15/03/2022:  Ajout de "traces" entree dans les méthodes.
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

import inspect

from qgis.core import QgsProject
from qgis.gui import QgsLayerTreeMapCanvasBridge

from PyQt5 import QtCore
from PyQt5.QtWidgets import (
    QSizePolicy,
    QWidget,
    QMainWindow,
    QPushButton,
    QVBoxLayout,
    QGridLayout,
    QHBoxLayout,
    QSpacerItem,
    QGroupBox,
    QDockWidget,
)

from .TnT_MapCanvas import TnTmapCanvas
from .TnT_LayerTreeView import TnTLayerTreeView
from .TnT_Communicate import TnTcommunicate

def lineno():
    """Returns the current line number in Python source code"""
    return inspect.currentframe().f_back.f_lineno

class TnTadditionalView(QMainWindow):
    """
    Class managing the additional view.
    """

    def __init__(self, parent=None):
        QMainWindow.__init__(self, parent)

        self.setObjectName("Additional_View")
        self.resize(1300, 900)

        self.comm = TnTcommunicate()
        self.comm.closeAdditionalView.connect(self.close)

        self.tntLayerTreeView = None
        self.canvas = None

        self.setupUi()

        self.setWindowFlags(
            self.windowFlags()  # reuse initial flags
            & ~QtCore.Qt.WindowCloseButtonHint  # and unset flag
        )

        self.show()

    def setCanvas(self, canvas=None):
        """


        Parameters
        ----------
        canvas : TYPE, optional
            DESCRIPTION. The default is None.

        Returns
        -------
        None.

        """
        # print(f"line:{lineno()},{self.__class__.__name__}->\
        #       {inspect.currentframe().f_code.co_name}()")
        self.canvas = canvas

    def getCanvas(self):
        """


        Returns
        -------
        TYPE
            DESCRIPTION.

        """
        # print(f"line:{lineno()},{self.__class__.__name__}->\
        #       {inspect.currentframe().f_code.co_name}()")
        return self.canvas

    def unsetCanvas(self):
        """


        Returns
        -------
        None.

        """
        # print(f"line:{lineno()},{self.__class__.__name__}->\
        #       {inspect.currentframe().f_code.co_name}()")

        self.setCanvas()


    def setupUi(self):
        """
            setup UI.


        Returns
        -------
        None.

        """
        # print(f"line:{lineno()},{self.__class__.__name__}->\
        #       {inspect.currentframe().f_code.co_name}()")

        sizePolicy = QSizePolicy(QSizePolicy.Minimum, QSizePolicy.Minimum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)

        centralwidget = QWidget(self)
        centralwidget.setObjectName("Central_Widget")
        centralwidget.setSizePolicy(sizePolicy)
        verticalLayout = QVBoxLayout(centralwidget)

        topWidget = self.setTopWidget(QWidget(centralwidget))
        topWidget.setObjectName("Top_Widget")
        verticalLayout.addWidget(topWidget)

        middleWidget = QWidget(centralwidget)
        middleWidget.setSizePolicy(sizePolicy)
        middleWidget.setObjectName("Middle_Widget")

        horizontalLayout_middle = QHBoxLayout(middleWidget)
        horizontalLayout_middle.setObjectName("Horizontal_Layout_middle")

        self.canvas = TnTmapCanvas(middleWidget, "Canvas_AdditionalView")
        horizontalLayout_middle.addWidget(self.canvas)

        verticalLayout.addWidget(middleWidget)

        self.setCentralWidget(centralwidget)

        # DockWidget West ie (treeView)
        dockWidget_west = QDockWidget(self)

        dockWidget_west.setFeatures(
            dockWidget_west.features() & ~QDockWidget.DockWidgetClosable
        )
        sizePolicy = QSizePolicy(QSizePolicy.Maximum, QSizePolicy.Preferred)
        dockWidget_west.setSizePolicy(sizePolicy)

        dockWidgetContents_west = QWidget()
        gridLayout_west = QGridLayout(dockWidgetContents_west)

        # Used clone of initial layerRoot:
        # Allows the selection of layers without affecting the state of
        # the project LayerTreeRoot
        self.tntLayerTreeView = TnTLayerTreeView(
            self,
            dockWidgetContents_west,
            QgsProject.instance().layerTreeRoot().clone(),
        )

        sizePolicy = QSizePolicy(QSizePolicy.Minimum, QSizePolicy.Minimum)
        self.tntLayerTreeView.setSizePolicy(sizePolicy)

        gridLayout_west.addWidget(self.tntLayerTreeView, 0, 0, 1, 1)

        dockWidget_west.setWidget(dockWidgetContents_west)

        self.addDockWidget(QtCore.Qt.DockWidgetArea(1), dockWidget_west)

        self.layerTreeMapCanvasBridge = QgsLayerTreeMapCanvasBridge(
            self.tntLayerTreeView.getLayerTreeRoot(), self.getCanvas()
        )

        QtCore.QMetaObject.connectSlotsByName(self)


    def setTopWidget(self, widget):
        """


        Parameters
        ----------
        widget : TYPE
            DESCRIPTION.

        Returns
        -------
        widget : TYPE
            DESCRIPTION.

        """
        # print(f"line:{lineno()},{self.__class__.__name__}->\
        #       {inspect.currentframe().f_code.co_name}()")

        # Init Group box contains buttons which manage additional view

        sizePolicy = QSizePolicy(QSizePolicy.Preferred, QSizePolicy.Maximum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)

        groupBox = QGroupBox(widget)
        groupBox.setSizePolicy(sizePolicy)

        # Change size policy for next pushButton
        sizePolicy = QSizePolicy(QSizePolicy.Maximum, QSizePolicy.Minimum)

        layout = QHBoxLayout(groupBox)
        layout.setContentsMargins(4, 2, 4, 2)
        layout.setSpacing(4)

        centerAll_pushButton = QPushButton(groupBox)
        centerAll_pushButton.setText("Center All")
        centerAll_pushButton.setObjectName(centerAll_pushButton.text().replace(' ','_'))
        centerAll_pushButton.setSizePolicy(sizePolicy)
        layout.addWidget(centerAll_pushButton)

        # Spacer : push all  buttons on right side
        spacerItem = QSpacerItem(558,
                                 20,
                                 QSizePolicy.Expanding,
                                 QSizePolicy.Minimum
                                 )
        layout.addItem(spacerItem)

        synchroViews_pushButton = QPushButton(groupBox)
        synchroViews_pushButton.setText("Synchro Views")
        synchroViews_pushButton.setObjectName(synchroViews_pushButton.text().replace(' ','_'))
        synchroViews_pushButton.setSizePolicy(sizePolicy)
        synchroViews_pushButton.setCheckable(True)
        synchroViews_pushButton.setChecked(False)
        layout.addWidget(synchroViews_pushButton)

        centerAll_pushButton.clicked.connect(self.centerAll)
        # # Calling <synchro_AdditionalView()> method,
        # # on clicking button <synchro_pushButton>
        synchroViews_pushButton.clicked.connect(self.synchronize_Views)

        return groupBox

    def synchronize_Views(self):
        """

        Returns
        -------
        None.

        """
        # print(f"line:{lineno()},{self.__class__.__name__}->\
        #       {inspect.currentframe().f_code.co_name}()")

        sender = self.sender()
        self.toggleTextButton(
            sender,
            "Synchro Views",
            "UnSynchro Views"
        )
        self.getCanvas().toggleStateSynchroMode()
        self.set_SynchronizeViews_State(sender, self.parent())

    def set_SynchronizeViews_State(self, sender, view_target):
        """

        Parameters
        ----------
        sender : TYPE
            DESCRIPTION.
        view_target : TYPE
            DESCRIPTION.

        Returns
        -------
        None.

        """
        # print(f"line:{lineno()},{self.__class__.__name__}->\
        #       {inspect.currentframe().f_code.co_name}()")

        widget_type = type(sender)
        widget_name = sender.objectName()
        button = view_target.findChild(widget_type, widget_name)
        button.setChecked(sender.isChecked())
        button.setText(sender.text())
        view_target.getActiveCanvas().toggleStateSynchroMode()

    def toggleTextButton(self, pushButton, textON, textOFF):
        """
        Parameters
        ----------
        pushButton : TYPE
            DESCRIPTION.
        textON : TYPE
            DESCRIPTION.
        textOFF : TYPE
            DESCRIPTION.

        Returns
        -------
        None.

        """
        # print(f"line:{lineno()},{self.__class__.__name__}->\
        #       {inspect.currentframe().f_code.co_name}(pushButton={pushButton}),")

        t = (lambda: textON, lambda: textOFF)[pushButton.isChecked()]()
        pushButton.setText(t)

    def centerAll(self):
        """
        Returns
        -------
        None.

        """
        # print(f"line:{lineno()},{self.__class__.__name__}->\
        #       {inspect.currentframe().f_code.co_name}()")

        self.getCanvas().zoomToFullExtent()
