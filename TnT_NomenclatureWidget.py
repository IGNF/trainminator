# -*- coding: utf-8 -*-/
"""
/***************************************************************************
TnT_NomenclatureWidget
                                 A QGIS plugin
Labelisation de données segmentées.
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2021-01-25
        git sha              : $Format:%H$
        copyright            : (C) 2021 by IGN
        email                : yann.le-borgne@ign.fr
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

import inspect
import csv


from PyQt5.QtCore    import (Qt, QVariant,QItemSelectionModel)
from PyQt5.QtGui     import (QBrush, QColor)
from PyQt5.QtWidgets import (QTreeWidgetItem, QComboBox, QTreeWidget, 
                             QSizePolicy, QWidget, QVBoxLayout, 
                             QSpacerItem)


class TnTnomenclatureWidget (QWidget):
    
    def __init__(self, mainWindow=None, parent=None):
        super(TnTnomenclatureWidget, self).__init__(parent)
        
        self.mainWindow=mainWindow
        self.delimiter=';'
        self.quoteChar=''
        self.searchCode=''
   
        self.rootElements = []
        
        #Nomenclature file header 
        self.fieldNameHeader = ['code','class','color']
        self.tableAttributs={self.fieldNameHeader[0]:QVariant.Int,
                             self.fieldNameHeader[1]:QVariant.String,
                             self.fieldNameHeader[2]:QVariant.Int}
        
        #Used for contruct screening rules 
        self.colorClassAssociation={}
        
        self.classSelected=['NO_CODE', 'NO_LABEL', '#FFFFFF']
               
        #self.defaultNomenclatureName="no_nomenclature"
        self.defaultNomenclatureName="Please open nomenclature from menu."
        self.defaultNomenclatureFile=""
    
        #Dictionnary of nomenclatures <key>=nomenclatureName  <value> fullPath to nomenclatureFile
        self.nomenclatureFilesDict={self.defaultNomenclatureName:self.defaultNomenclatureFile}
        
        self.indexCurrentNomenclature=0
        self.currentNomenclatureName=''
        self.nomenclatureSelector=None
        self.nomenclatureTree = None

        self.limit_width=150
    
        self.setupUi()
               
        self.nomenclatureSelector.activated.connect(self.drawNomenclature)
        self.nomenclatureTree.itemSelectionChanged.connect(self.classSelectionChanged)
        
        
    def lineno(self):
         "Returns the current line number"
         return inspect.currentframe().f_back.f_lineno     
          
    def getFieldNameHeader(self):
        return self.fieldNameHeader
        
    def getDelimiter(self):
        return self.delimiter
    
    def setDelimiter(self, delimiter=';'):
        self.delimiter=delimiter
        
    def getQuoteChar(self):
        return self.quoteChar
    
    def setQuoteChar(self, quoteChar=';'):
        self.quoteChar=quoteChar 
            
    def getIndexCurrentNomenclature(self):
        return self.indexCurrentNomenclature
        
    def setIndexCurrentNomenclature(self, index=0):
        self.indexCurrentNomenclature=index
        
    def unsetIndexCurrentNomenclature(self):
        self.setIndexCurrentNomenclature()
        
              
    def setCurrentNomenclatureName(self, name):
        self.currentNomenclatureName=name
            
    def getCurrentNomenclatureName(self):
        return self.currentNomenclatureName   
        
    def setupUi(self):
        #print(f"line:{self.lineno()}, TnTnomenclatureWidget->setupUi()")
        self.layout = QVBoxLayout(self) 
        self.layout.setContentsMargins(-1, 1, -1, 1)
               
        self.nomenclatureSelector= QComboBox(self) 
        self.nomenclatureSelector.addItems( self.nomenclatureFilesDict.keys() )
        self.layout.addWidget(self.nomenclatureSelector)
           
        self.nomenclatureTree= QTreeWidget(self)
        self.nomenclatureTree.headerItem().setText(0, self.fieldNameHeader[0])
        self.nomenclatureTree.headerItem().setText(1, self.fieldNameHeader[1]) 
        self.nomenclatureTree.headerItem().setText(2, self.fieldNameHeader[2])
           
        self.layout.addWidget(self.nomenclatureTree) 
        spacerItem = QSpacerItem(20, 40, QSizePolicy.Minimum, QSizePolicy.Minimum)
        self.layout.addItem(spacerItem)
       
           
    def clear(self):
        """
        ----------
        none : TYPE.

        Returns
        -------
        Execute when the project is cleared (and additionally when an open project is cleared just before a new project is read).

        """
        #print(f"line:{self.lineno()}, TnTnomenclatureWidget->cleared()")
        self.nomenclatureFilesDict.clear()
        self.nomenclatureFilesDict={self.defaultNomenclatureName:self.defaultNomenclatureFile}
        
        self.setIndexCurrentNomenclature()
        self.colorClassAssociation.clear()
        
        self.nomenclatureSelector.clear()
        self.nomenclatureSelector.addItems( self.nomenclatureFilesDict.keys() )
        
        self.nomenclatureTree.clear()
        self.nomenclatureTree.headerItem().setText(0, self.fieldNameHeader[0])
        self.nomenclatureTree.headerItem().setText(1, self.fieldNameHeader[1])
        self.nomenclatureTree.headerItem().setText(2, self.fieldNameHeader[2])
        
        
            
    def rgb2hex(self, rvb=[0,0,0]):
        return '#%02x%02x%02x' % (rvb[0], rvb[1], rvb[2])

    def hex2rgb(self, hx):
        return [ int(hx[0:2],16), int(hx[2:4],16) , int(hx[4:6],16)]
    
    def convertColor2hex(self, stringColor):
        if stringColor.startswith('#'):
            return  stringColor
        elif stringColor.startswith('(') and stringColor.endswith(')'):
            res=(((stringColor.split('(')[1]).split(')'))[0]).split(',')
            color_RGB=[int(res[0]),int(res[1]),int(res[2])]
            stringColor=self.rgb2hex(color_RGB)
            return stringColor
        else :
            return stringColor
     
    def setColorClassAssociation(self, classKey, colorValue):
        self.colorClassAssociation[classKey]=colorValue
        
    def initFieldNameHeader(self, fileNamePath):
        with open(fileNamePath) as f:
            reader = csv.reader(f)
            row = next(reader)
            return row

    def dumpCSVFile(self, fileNamePath):
        #print(f"line:{self.lineno()}, TnTnomenclatureWidget->dumpCSVFile(fileNamePath:{fileNamePath})")

        try :
            csvFile=open(fileNamePath)
            csvReader = csv.DictReader(csvFile, fieldnames=self.getFieldNameHeader(), delimiter=self.getDelimiter())
              
            next(csvReader)
            
            # clear colorClassAssociation
            self.colorClassAssociation.clear()
            
            index=0
            for row in csvReader:
                color_HEX="#000000"
                color_RGB=[0,0,0]
                if self.fieldNameHeader[2] in row : 
                    col=row[self.fieldNameHeader[2]]
                    if col.startswith('#'):
                        color_HEX=col
                        res=(col.split('#')[1])
                        color_RGB=self.hex2rgb(res)

                    elif col.startswith('(') and col.endswith(')'):
                        res=(((col.split('(')[1]).split(')'))[0]).split(',')
                        color_RGB=[int(res[0]),int(res[1]),int(res[2])]
                        color_HEX=self.rgb2hex(color_RGB)
                    
                    color=QColor()
                    color.setRgb( color_RGB[0], color_RGB[1], color_RGB[2] )
                    qbrush=QBrush(color)
                    
                    if index==0: self.classSelected=[row[self.fieldNameHeader[0]],row[self.fieldNameHeader[1]], color_HEX]
                
                    twi=QTreeWidgetItem(self.nomenclatureTree, [row[self.fieldNameHeader[0]],row[self.fieldNameHeader[1]],color_HEX])
                    twi.setBackground(2, qbrush)
                    twi.setForeground(2, qbrush)
              
                    self.setColorClassAssociation(row[self.fieldNameHeader[1]], color_HEX)
                    index+=1
    
            csvFile.close()
        except FileNotFoundError :
            twi=QTreeWidgetItem(self.nomenclatureTree, ["0","No LABEL","#000000"])
        #print(f"line:{self.lineno()}, TnTnomenclatureWidget <<-- dumpCSVFile(fileNamePath:{fileNamePath})")
                     
    def drawNomenclature(self, index):
        #print(f"line:{self.lineno()},TnTnomenclatureWidget->drawNomenclature(index:{index})")
        self.nomenclatureTree.clear()
        self.setIndexCurrentNomenclature(index)
        iname=self.nomenclatureSelector.itemText(index)
        
        self.setCurrentNomenclatureName(iname)
        self.dumpCSVFile(self.nomenclatureFilesDict[iname])
        self.nomenclatureTree.resizeColumnToContents(0)
        self.nomenclatureTree.resizeColumnToContents(1)
        if self.nomenclatureTree.columnWidth(1) > self.limit_width: self.nomenclatureTree.setColumnWidth(1, self.limit_width)
        self.nomenclatureTree.resizeColumnToContents(2)
              
    def keyPressEvent(self, event):
        #print(f"line:{self.lineno()}, TnTnomenclatureWidget -> keyPressEvent()")
        if Qt.Key_0 <= event.key() <= Qt.Key_9 :
            self.searchCode=self.searchCode+str( event.text() )
        elif event.key() == Qt.Key_Return :
            itemsList = self.nomenclatureTree.findItems( self.searchCode , Qt.MatchExactly, 0)
            if itemsList :
                self.nomenclatureTree.setCurrentItem( itemsList[0],
                                                      0,
                                                      QItemSelectionModel.ClearAndSelect | QItemSelectionModel.Rows)
            self.searchCode=''
        else:
            return QWidget.keyPressEvent(self, event)
        
    def classSelectionChanged(self):
        #print(f"line:{self.lineno()}, TnTnomenclatureWidget -> classSelectionChanged()")
        try : 
            newClass=self.nomenclatureTree.selectedItems()[0]
            self.classSelected=[newClass.text(0), newClass.text(1), newClass.text(2)]
        except IndexError : pass
        return True
           
        
        