# -*- coding: utf-8 -*-/
"""
/***************************************************************************
TnT_MapCanvas
                                 A QGIS plugin
Labelisation de données segmentées.
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2021-01-25
        git sha              : $Format:%H$
        copyright            : (C) 2021 by IGN
        email                : yann.le-borgne@ign.fr
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
import inspect

from qgis.gui import (QgsMapCanvas, QgsVertexMarker, QgsMapTool)

from PyQt5.QtCore    import (Qt, QEvent)
from PyQt5.QtGui     import ( QColor, QMouseEvent )


def lineno():
    """Returns the current line number in Python source code"""
    return inspect.currentframe().f_back.f_lineno

def flocals():
    """Returns the local namespace seen by this frame"""
    return inspect.currentframe().f_back.f_locals

class TnTmapCanvas( QgsMapCanvas ):
    """
    Canvas handling class.
    """

    def __init__(self, parent=None, name=None):
        super(TnTmapCanvas, self).__init__(parent)
        self.parent=parent
        self.name=name
        self.slave=None
        #Synchro mode , default=False at starting
        self.synchroMode=False

        self.marker=None
        self.qgsmaptool=QgsMapTool(self)

        self.setUpUi()

        Focus_yellow='#FFC829'
        self.defaultStyle= """QgsMapCanvas {
                                        border: 1px solid grey;
                                        border-radius: 4px;
                                        padding:2px
                                        }"""

        self.hoverStyle= """QgsMapCanvas:focus {
                                            border: 3px solid"""+Focus_yellow+""";
                                            border-radius: 4px;
                                            padding:2px
                                        }"""

        self.setStyleSheet(self.defaultStyle+self.hoverStyle)

    def setUpUi(self):
        """
            :param none:
            :returns none:
        """
        #print(f"line:{lineno()}, TnTmapCanvas->setupUi()")
        self.setCanvasColor(Qt.white)
        self.setDefaultMarker()


    def setDefaultMarker(self):
        """
            :param none:
            :returns none:
        """
        #print(f"line:{lineno()}, TnTmapCanvas->setDefaultMarker()")
        self.marker = QgsVertexMarker(self)
        self.marker.setColor(QColor(255,255,255))
        self.marker.setIconSize(30)
        self.marker.setIconType(QgsVertexMarker.ICON_CROSS )
        self.marker.setPenWidth(2)

    def extChange(self):
        """
            :param none:
            :returns none:
        """
        #print(f"line:{lineno()}, TnTmapCanvas->extChange()")
        try:
            self.getSlave().extChangeSlave( self.extent() )
        except AttributeError:
            pass

    def extChangeSlave(self, extent):
        """
            :param extent:
            :returns none:
        """
        #print(f"line:{lineno()}, TnTmapCanvas->extChangeSlave(extent:{extent})")
        self.extentsChanged.disconnect()
        self.setExtent(extent)
        self.refresh()
        self.extentsChanged.connect(self.extChange)

    def showMousePointerMarker(self, p):
        """
        This method display the mouse pointer (marker) at <p> position
        in canvas of slave view.
            :param p: mouse pointer position  QgsPointXY.
            :returns none:
        """
        #print(f"line:{lineno()}, TnTmapCanvas->showMousePointerMarker(p:{p})")

        self.marker.setCenter(p)
        self.marker.show()

    def setName(self, name="no name"):
        """
            :param name:
            :returns none:
        """
        #print(f"line:{lineno()}, TnTmapCanvas->setName({name})")
        self.name=name

    def getName(self):
        """
            :param none:
            :returns none:
        """
        #print(f"line:{lineno()}, TnTmapCanvas->getName()")
        return self.name

    def setSlave(self, slave=None):
        """
            :param none:
            :returns none:
        """
        #print(f"line:{lineno()}, TnTmapCanvas->setSlave({slave})")
        self.slave=slave

    def unsetSlave(self):
        """
            :param none:
            :returns none:
        """
        #print(f"line:{lineno()}, TnTmapCanvas->unsetSlave()")
        self.setSlave()

    def getSlave(self):
        """
            :param none:
            :returns none:
        """
        #print(f"line:{lineno()}, TnTmapCanvas->getSlave()")
        return self.slave

    def info(self):
        """
            :param none:
            :returns none:
        """
        #print(f"line:{lineno()}, TnTmapCanvas->info()")
        print("=================================================================")
        print(f"            self.name: {self.name}")
        if self.slave:
            print(f"          self.slave: {self.slave}+{self.slave.name}")
        else :         print("           self.slave: NO SALVE+NO NAME")
        print(f"     self.synchroMode: {self.synchroMode}")
        print("=================================================================")
        print("")

    def setSynchroMode(self, synchroMode=False):
        """
        This method instantiates the synchronization mode between the main and
        the additional view.
        used : self.setSynchroMode()=synchronisation mode OFF.

            :param synchroMode:set synchronisation mode ON (True) or OFF (False)
            :returns none:
        """
        #print(f"line:{lineno()}, TnTmapCanvas->getSynchroMode(synchroMode={synchroMode})")
        self.synchroMode=synchroMode

    def getSynchroMode(self):
        """
        This method return state of synchronization mode.
            :param none:
            :returns none:
        """
        #print(f"line:{lineno()}, TnTmapCanvas->getSynchroMode()")
        return self.synchroMode

    def toggleStateSynchroMode(self):
        """
        This method is called when the user presses the button <Synchro View>.
        toggle state of mode synchronisation mode.
            :param none:
            :returns none:
        """
        #print(f"line:{lineno()}, TnTmapCanvas->toggleStateSynchroMode()")
        if self.getSynchroMode():
            self.synchroModeOFF()
        else:
            self.synchroModeON()

    def synchroModeON(self):
        """
        Activate the functionalities of the synchronization mode between the views.
        Same visible area and Same position of the mouse pointer.
            :param none:
            :returns none:
        """
        #print(f"line:{lineno()}, TnTmapCanvas->synchroModeON()")
        self.setSynchroMode(True)
        self.extentsChanged.connect(self.extChange)
        self.xyCoordinates.connect(self.getSlave().showMousePointerMarker)

    def synchroModeOFF(self):
        """
        Deactivate the functionalities activated by the synchroModeON() method.

            :param none:
            :returns none:
        """
        #print(f"line:{lineno()}, TnTmapCanvas->synchroModeOFF()")
        self.setSynchroMode()
        self.extentsChanged.disconnect()
        self.xyCoordinates.disconnect()
        self.marker.hide()

    def syncZoom (self):
        """
        Synchronization of the zooms between the main and additional view.
            :param none:
            :returns none:
        """
        #print(f"line:{lineno()}, TnTmapCanvas->syncZoom()")
        if self.getSynchroMode():
            self.getSlave().setTransform(self.transform(),False)


    def mouseMoveEvent(self, event:QMouseEvent):
        """
            :param event:
            :returns none:
        """
        #print(f"line:{lineno()}, TnTmapCanvas->mouseMoveEvent(event:{event})")
        self.marker.hide()
        try:
            self.slave
        except AttributeError:
            pass
        else :
            if self.synchroMode:
                qgspointXY =self.qgsmaptool.toMapCoordinates(event.pos())
                self.slave.showMousePointerMarker(qgspointXY)

        return QgsMapCanvas.mouseMoveEvent(self, event)

    def event(self, event: QEvent):
        """
            :param event:
            :returns none:
        """
        #print(f"line:{lineno()}, TnTmapCanvas->event(event:{event})")
        evt_Type=event.type()
        if evt_Type==QEvent.KeyPress and event.key()==Qt.Key_Space:
            #Additional view canvas does not have a toolbox, ignore error
            try:
                self.parent.getPushButton('Show Context').keyPressEvent(event)
            except AttributeError:
                pass
            return True

        elif evt_Type==QEvent.KeyRelease and event.key()==Qt.Key_Space :
            #Additional view canvas does not have a toolbox, ignore error
            try:
                self.parent.getPushButton('Show Context').keyReleaseEvent(event)
            except AttributeError:
                pass
            return True

        else:
            return QgsMapCanvas.event(self, event)
